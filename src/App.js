/*global chrome*/

import React, { Component } from 'react';

import GrpcWebStreamParser from './GrpcWebStreamParser'

import * as jspb from 'google-protobuf'
import './App.css';

import { decodeStringToUint8Array } from './base64'

class App extends Component {

  state = {
    requests: [],
  }

  componentDidMount() {
    if (window.chrome && window.chrome.devtools) {
      chrome.devtools.network.onRequestFinished.addListener(rtn => {
        if (rtn.request.postData.mimeType === "application/grpc-web-text") {
          const { requests } = this.state;
          requests.push(rtn.request.url);
          this.setState({ requests });
        }
      });
    }

    const responseText = `gAAAAA9ncnBjLXN0YXR1czowDQo=`

    var newPos = responseText.length - responseText.length % 4;
    var newData = responseText.substr(0, newPos);
    var byteSource = decodeStringToUint8Array(newData);

    var parser = new GrpcWebStreamParser()

    var messages = parser.parse([].slice.call(byteSource));
    if (messages) {
      var FrameType = GrpcWebStreamParser.FrameType;
      for (var i = 0; i < messages.length; i++) {
        if (FrameType.DATA in messages[i]) {
          var data = messages[i][FrameType.DATA];
          var reader = new jspb.BinaryReader(data);

          while (reader.nextField()) {
            if (reader.isEndGroup()) {
              break;
            }
            console.log(reader)
            // var field = reader.getFieldNumber();
            var value = reader.getFieldDecoder()

            // reader.readAny(value)
            console.log(value)
          }


        }
      }
    }


  }

  render() {
    return (
      <div className="App">
        {this.state.requests.map(element => {
          return <div>{element}</div>
        })}
      </div>
    );
  }
}


export default App;
